app:
  name: magento2
  import:
    media_files:
      target: "{{ services.php.working_directory }}/pub/media"
      name: Media Files
  notices:
    usage: >-
      After this setup, run the following commands to finish up:

        # 1. Install Composer modules
        cd <project>/{{ parent().src }}/{{ services.php.working_directory }}
        riptide cmd composer install

        # 2. Start the database and redis
        riptide start -s redis,db

        # 3. Run setup:upgrade
        riptide cmd magento setup:upgrade

      Riptide set's only the default store's Base URLs (to http://{{ get_service_by_role("magento_front").domain() }}).
      
      Optional:
        If you want to configure multiple websites you need to specify additional_subdomains for the service '{{ get_service_by_role("src")["$name"] }}'
        and add the subdomain of every website (except the default one) to the list.
        Additionally you'll need to set the MAGE_RUN_CODE for every website,
        which is done by setting an environment variable for each subdomain you added using the following key: SUBDOMAIN_<uppercase subdomain name>_CODE
      
        You can find an example configuration here: https://github.com/theCapypara/riptide-repo/pull/28#Example

      After that your Magento shop will be ready! Enjoy!

    installation: >-
      To install Magento run the following commands on the command line:

        # 0. Download the Magento source code (replace with 'enterprise-edition' if you want):
        mkdir -p <project_directory_root>/{{ parent().src }}
        cd <project_directory_root>/{{ parent().src }}
        riptide cmd composer create-project --repository=https://repo.magento.com magento/project-community-edition ./{{ services.php.working_directory }} "2.3.*"

        # 1. Dump the autoloader
        cd ./{{ services.php.working_directory }}
        riptide cmd composer dump-autoload

        # 2. Start the database and redis
        riptide start -s redis,db

        # 3. Install Magento using the CLI.
        riptide cmd magento setup:install \
          --base-url=https://{{ get_service_by_role("magento_front").domain() }}/ \
          --db-host=db \
          --db-name={{ services.db.driver.config.database }} \
          --db-user=root  \
          --db-password={{ services.db.driver.config.password }} \
          --admin-firstname=Admin \
          --admin-lastname=Admin \
          --admin-email=email@yourcompany.com \
          --admin-user=admin \
          --admin-password=admin123 \
          --language=en_US \
          --currency=USD \
          --timezone=America/Chicago \
          --use-rewrites=1

        # 4. (Optional) install sample data
        riptide cmd magento sampledata:deploy

        # 5. Run setup:upgrade
        riptide restart -s redis
        riptide cmd magento setup:upgrade

      You can change the settings in step 3 to your likings, see the installation guide at
        https://devdocs.magento.com/guides/v2.3/install-gde/install/cli/install-cli.html
  unimportant_paths:
    # These paths will not be updated on the host if the containers change files.
    - '{{ services.php.working_directory }}/pub'
    - '{{ services.php.working_directory }}/var'
    - '{{ services.php.working_directory }}/generated'
  services:
    php:
      $ref: /service/php/7.4/fpm
      roles:
        - src
        - php
      logging:
        stdout: true
        stderr: true
      config:
        nginx_conf_main_entry:
          from: assets/magento-nginx-entrypoint.conf
          to: '{{ get_working_directory() }}/nginx.conf.riptide'
        env_php:
          from: assets/env.php
          to: '{{ get_working_directory() }}/app/etc/env.php'
      pre_start:
        # Wait for db
        - 'until bin/magento; do :; done'
        # Set basic database settings
        - "bin/magento config:set --scope=default web/unsecure/base_url 'https://{{ parent().get_service_by_role(\"magento_front\").domain() }}/'"
        - "bin/magento config:set --scope=default web/secure/base_url 'https://{{ parent().get_service_by_role(\"magento_front\").domain() }}/'"
        - "bin/magento config:set --scope=default web/secure/offloader_header X-Forwarded-Proto"
        # Set base URLs for additional subdomains
        - "{% for subdomain, additional_domain in parent().get_service_by_role('magento_front').additional_domains().items() %} bin/magento config:set --scope website --scope-code '{{ subdomain }}' web/unsecure/base_url 'http://{{ additional_domain }}/'; {% endfor %}"
        - "{% for subdomain, additional_domain in parent().get_service_by_role('magento_front').additional_domains().items() %} bin/magento config:set --scope website --scope-code '{{ subdomain }}' web/secure/base_url 'https://{{ additional_domain }}/'; {% endfor %}"
        # Load the database config via mageconfigsync if installed
        - "php vendor/bin/mageconfigsync load --env dev app/etc/config.yml || true"
        # Flush cache
        - "bin/magento cache:flush"

    www:
      $ref: /service/nginx/latest
      roles:
        - src
        - varnish
      image: nginx
      logging:
        stdout: true
        stderr: true
      environment:
        MAGE_RUN_TYPE: website
      config:
        env_php:
          from: assets/env.php
          to: '{{ get_working_directory() }}/app/etc/env.php'
        magento_nginx_conf:
          from: assets/magento-nginx.conf
          to: '/etc/nginx/conf.d/default.conf'
      additional_volumes:
        magerun_config:
          host: "~/.n98-magerun2"
          container: "{{ home_path() }}/.n98-magerun2"
          mode: "ro"
      pre_start:
        # Wait for php (otherwise nginx crashes) :(
          - "until getent hosts php >/dev/null 2>&1; do :; done"

    varnish:
      $ref: /service/varnish/6
      roles:
        - main
        - magento_front
      config:
        vcl:
          from: assets/6.vcl
      logging:
        stdout: true
        stderr: true

    db:
      $ref: /service/mysql/5.7
      image: mariadb:10.6
      driver:
        config:
          database: magento2
          password: magento2
      config:
        extra:
          from: assets/mysql.cnf
          to: /etc/mysql/conf.d/mysql.cnf
      logging:
        stdout: true
        stderr: true

    redis:
      $ref: /service/redis/4.0

    rabbitmq:
      $ref: /service/rabbitmq/3.6
      logging:
        stdout: true
        stderr: true

    mail:
      roles:
        # for php service:
        - mail
      $ref: /service/mailhog/latest

  commands:
    php:
      $ref: /command/php/from-service
    magerun:
      in_service_with_role: php
      command: magerun2
    n98-magerun:
      aliases: magerun
    n98-magerun2:
      aliases: magerun
    magerun2:
      aliases: magerun
    mysql:
      $ref: /command/mysql/from-service-db
    magento:
      in_service_with_role: php
      command: "{{ parent().get_service_by_role('php').get_working_directory() }}/bin/magento"
    composer:
      $ref: /command/composer/v2-with-host-links
    redis-cli:
      $ref: /command/redis-cli/base
